const express = require('express');
const axios = require('axios');
const Imap = require('imap');
const { simpleParser } = require('mailparser');

const app = express();
const PORT = process.env.PORT || 3000;

// H√†m l·∫•y token x√°c th·ª±c t·ª´ mail.tm
async function getAuthToken(email, password) {
    const url = 'https://api.mail.tm/token';
    const payload = { address: email, password };
    try {
        const response = await axios.post(url, payload, {
            headers: { 'Content-Type': 'application/json' }
        });
        return response.data.token;
    } catch (error) {
        console.error('L·ªói khi l·∫•y token:', error.response?.data || error.message);
        return null; // Tr·∫£ v·ªÅ null n·∫øu l·ªói
    }
}

// H√†m l·∫•y danh s√°ch email t·ª´ h·ªôp th∆∞
async function getEmails(token) {
    const url = 'https://api.mail.tm/messages';
    try {
        const response = await axios.get(url, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        return response.data['hydra:member'];
    } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch email:', error.response?.data || error.message);
        return [];
    }
}

// H√†m l·∫•y n·ªôi dung email chi ti·∫øt
async function getEmailContent(token, emailId) {
    const url = `https://api.mail.tm/messages/${emailId}`;
    try {
        const response = await axios.get(url, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        return response.data.text || response.data.html || '';
    } catch (error) {
        console.error('L·ªói khi l·∫•y n·ªôi dung email:', error.response?.data || error.message);
        return '';
    }
}

// H√†m tr√≠ch xu·∫•t m√£ x√°c th·ª±c t·ª´ n·ªôi dung email
function extractVerificationCode(emailContent) {
    const pattern = /\b\d{6}\b/;
    const match = emailContent.match(pattern);
    return match ? match[0] : null;
}

// API endpoint: /get-code?email=your@email.com&password=yourpassword
app.get('/get-code', async (req, res) => {
    const email = req.query.email;
    const password = req.query.password;

    if (!email || !password) {
        return res.status(400).json({ error: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    console.log(`Y√™u c·∫ßu t·ª´: ${email}, password: ${password}`);

    try {
        // B∆∞·ªõc 1: L·∫•y token
        const token = await getAuthToken(email, password);
        if (!token) {
            return res.json({ code: "111111" }); // Tr·∫£ v·ªÅ 111111 n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c token
        }

        // B∆∞·ªõc 2: Ki·ªÉm tra h·ªôp th∆∞ ƒë·ªÉ l·∫•y m√£
        for (let i = 0; i < 5; i++) {
            const emails = await getEmails(token);
            if (emails.length > 0) {
                const latestEmail = emails[0];
                const emailContent = await getEmailContent(token, latestEmail.id);
                const code = extractVerificationCode(emailContent);
                if (code) {
                    return res.json({ code: code });
                }
            }
            console.log('Ch∆∞a t√¨m th·∫•y m√£, ch·ªù 5 gi√¢y...');
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
        return res.json({ code: "111111" }); // Tr·∫£ v·ªÅ 111111 n·∫øu kh√¥ng t√¨m th·∫•y m√£ sau 5 l·∫ßn th·ª≠
    } catch (error) {
        console.error('L·ªói:', error);
        return res.json({ code: "111111" }); // Tr·∫£ v·ªÅ 111111 n·∫øu c√≥ l·ªói b·∫•t ng·ªù
    }
});

// ‚úÖ H√†m t·∫°o chu·ªói ng·∫´u nhi√™n m·∫°nh
function randomString(length) {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    return Array.from({ length }, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('');
}

// ‚úÖ H√†m t·∫°o email v·ªõi Mail.tm (retry t·ªëi ƒëa 5 l·∫ßn, delay 3s m·ªói l·∫ßn)
async function createMailTM(retries = 5) {
    for (let i = 0; i < retries; i++) {
        try {
            // B∆∞·ªõc 1: L·∫•y danh s√°ch domain t·ª´ Mail.tm
            const domainResponse = await axios.get('https://api.mail.tm/domains', { timeout: 3000 });
            const domains = domainResponse.data['hydra:member'];
            if (!domains.length) throw new Error("Kh√¥ng c√≥ domain n√†o kh·∫£ d·ª•ng");

            // B∆∞·ªõc 2: T·∫°o email ng·∫´u nhi√™n
            const email = `${randomString(12)}@${domains[Math.floor(Math.random() * domains.length)].domain}`;
            const password = randomString(10);

            // B∆∞·ªõc 3: T·∫°o t√†i kho·∫£n tr√™n Mail.tm
            const response = await axios.post('https://api.mail.tm/accounts', {
                address: email,
                password: password
            }, {
                headers: { 'Content-Type': 'application/json' },
                timeout: 5000
            });

            return { email, password, accountInfo: response.data };
        } catch (error) {
            console.error(`L·ªói khi t·∫°o email (th·ª≠ l·∫ßn ${i + 1}):`, error.message);
            if (i < retries - 1) await new Promise(res => setTimeout(res, 3000)); // ƒê·ª£i 3 gi√¢y r·ªìi th·ª≠ l·∫°i
        }
    }
    throw new Error("T·∫°o email th·∫•t b·∫°i sau nhi·ªÅu l·∫ßn th·ª≠");
}

// ‚úÖ API t·∫°o email
app.get('/create-email', async (req, res) => {
    try {
        const emailData = await createMailTM();
        res.json(emailData);
    } catch (error) {
        console.error("L·ªói t·∫°o email:", error.message);
        res.status(500).json({
            email: "error",
            password: "error",
            accountInfo: "error"
        });
    }
});

// üîπ H√†m l·∫•y m√£ t·ª´ mail.privateemail.com (IMAP)
async function getCodeFromIMAP(emailUser, emailPass, targetEmail) {
    return new Promise((resolve, reject) => {
        if (!emailUser || !emailPass || !targetEmail || !targetEmail.includes('@')) {
            return resolve({ code: 111111 }); // Tr·∫£ v·ªÅ m√£ m·∫∑c ƒë·ªãnh n·∫øu th√¥ng tin kh√¥ng h·ª£p l·ªá
        }

        const imap = new Imap({
            user: emailUser,
            password: emailPass,
            host: 'mail.privateemail.com',
            port: 993,
            tls: true
        });

        imap.once('ready', () => {
            imap.openBox('INBOX', false, (err, box) => {
                if (err) {
                    imap.end();
                    return reject(err);
                }

                // ‚úÖ S·ª≠a c√∫ ph√°p `search`
                imap.search([['TO', targetEmail]], (err, results) => {
                    if (err || !results || results.length === 0) {
                        imap.end();
                        return resolve({ code: 111111 });
                    }

                    const latestEmailId = results[results.length - 1];

                    const fetchStream = imap.fetch(latestEmailId, { bodies: '' });

                    fetchStream.on('message', (msg) => {
                        let emailData = '';

                        msg.on('body', (stream) => {
                            stream.on('data', (chunk) => emailData += chunk.toString());

                            stream.once('end', async () => {
                                try {
                                    const parsed = await simpleParser(emailData);
                                    const body = parsed.text || '';
                                    const code = extractVerificationCode(body);
                                    resolve({ code: code || 111111 });
                                } catch (error) {
                                    resolve({ code: 111111 });
                                }
                            });
                        });
                    });

                    fetchStream.on('end', () => imap.end());
                });
            });
        });

        imap.once('error', (err) => {
            console.error('L·ªói IMAP:', err);
            resolve({ code: 111111 });
        });

        imap.connect();
    });
}

// üîπ H√†m tr√≠ch xu·∫•t m√£ x√°c th·ª±c t·ª´ n·ªôi dung email
function extractVerificationCode(emailContent) {
    const pattern = /\b\d{6}\b/;
    const match = emailContent.match(pattern);
    return match ? match[0] : null;
}

// üîπ API l·∫•y m√£ t·ª´ mail.privateemail.com (IMAP)
app.get('/get-code2', async (req, res) => {
    const emailUser = decodeURIComponent(req.query.emailUser);
    const emailPass = decodeURIComponent(req.query.emailPass);
    const targetEmail = decodeURIComponent(req.query.targetEmail);

    console.log(`üì© Nh·∫≠n request: user=${emailUser}, pass=${emailPass}, target=${targetEmail}`);

    if (!emailUser || !emailPass || !targetEmail) {
        return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p" });
    }

    try {
        const result = await getCodeFromIMAP(emailUser, emailPass, targetEmail);
        res.json(result);
    } catch (error) {
        console.error('L·ªói:', error);
        res.json({ code: 111111 });
    }
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
    console.log(`Server ch·∫°y t·∫°i http://localhost:${PORT}`);
});
